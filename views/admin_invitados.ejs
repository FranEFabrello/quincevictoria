<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Invitados</title>
    <style>
        :root {
            color-scheme: light;
        }
        *,
        *::before,
        *::after {
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #f4f7f9;
            color: #333;
            margin: 0;
        }
        .admin-shell {
            display: flex;
            min-height: 100vh;
            background: linear-gradient(180deg, rgba(241, 245, 249, 0.9) 0%, rgba(255, 255, 255, 0.6) 40%);
        }
        .admin-sidebar {
            background: #0d1b2a;
            color: #fff;
            padding: 28px 20px;
            width: 280px;
            display: grid;
            grid-template-rows: auto minmax(0, 1fr) auto;
            gap: 20px;
            position: sticky;
            top: 0;
            height: 100vh;
            max-height: 100vh;
            overflow: hidden;
            box-shadow: 4px 0 24px rgba(13, 27, 42, 0.15);
        }
        @supports (height: 100dvh) {
            .admin-sidebar {
                height: 100dvh;
                max-height: 100dvh;
            }
        }
        .sidebar-header {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .sidebar-header h1 {
            font-size: 1.5rem;
            margin: 0;
            color: #fff;
        }
        .sidebar-description {
            margin: 0;
            color: rgba(207, 224, 255, 0.8);
            font-size: 0.85rem;
            line-height: 1.35;
        }
        .admin-nav {
            display: flex;
            flex-direction: column;
            gap: 16px;
            overflow: hidden;
        }
        .sidebar-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .sidebar-group-title {
            text-transform: uppercase;
            letter-spacing: 0.08em;
            font-size: 0.75rem;
            color: rgba(207, 224, 255, 0.65);
            margin: 0;
        }
        .sidebar-group-links {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .admin-nav a {
            color: #cfe0ff;
            text-decoration: none;
            font-weight: 600;
            padding: 8px 12px;
            border-radius: 8px;
            transition: background 0.2s ease, color 0.2s ease;
            display: block;
        }
        .admin-nav a:hover,
        .admin-nav a:focus {
            background: rgba(255, 255, 255, 0.12);
            color: #fff;
            outline: none;
        }
        .admin-nav a.is-active {
            background: #1b263b;
            color: #fff;
        }
        .sidebar-divider {
            height: 1px;
            background: rgba(255, 255, 255, 0.16);
            margin: 8px 0;
        }
        .admin-sidebar .sidebar-actions {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .sidebar-actions-title {
            text-transform: uppercase;
            letter-spacing: 0.08em;
            font-size: 0.75rem;
            color: rgba(207, 224, 255, 0.65);
            margin: 0;
        }
        .sidebar-actions .btn {
            width: 100%;
            justify-content: center;
        }
        .admin-content {
            flex: 1;
            padding: 40px 48px;
            display: flex;
            justify-content: center;
        }
        .container {
            max-width: 1200px;
            width: 100%;
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 12px 40px rgba(13, 27, 42, 0.08);
        }
        .section-stack {
            display: flex;
            flex-direction: column;
            gap: 36px;
        }
        .admin-section {
            scroll-margin-top: 32px;
        }
        .admin-section:target,
        .admin-section.is-active {
            animation: sectionHighlight 0.4s ease;
        }
        .section-block {
            background: linear-gradient(160deg, rgba(239, 244, 255, 0.8) 0%, rgba(255, 255, 255, 0.9) 100%);
            border: 1px solid rgba(13, 27, 42, 0.08);
            border-radius: 20px;
            padding: 32px;
            box-shadow: 0 18px 36px rgba(13, 27, 42, 0.08);
            display: flex;
            flex-direction: column;
            gap: 28px;
        }
        .section-block--subtle {
            background: white;
        }
        .section-block--table {
            padding: 0;
            overflow: hidden;
        }
        .section-block--table .section-header {
            padding: 32px 32px 24px;
            border-bottom: 1px solid rgba(13, 27, 42, 0.08);
        }
        .section-block--table .section-body {
            padding: 0 32px 32px;
        }
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 24px;
            flex-wrap: wrap;
        }
        .section-header h2 {
            margin: 0;
            color: #0d1b2a;
        }
        .section-header .section-intro {
            margin: 6px 0 0;
            color: #6c757d;
            max-width: 720px;
        }
        .section-body {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }
        .section-columns {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        }
        .results-overview {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            align-items: center;
            background: rgba(13, 110, 253, 0.08);
            border: 1px solid rgba(13, 110, 253, 0.18);
            padding: 18px 22px;
            border-radius: 14px;
        }
        .results-overview strong {
            font-size: 1.15rem;
            color: #0d1b2a;
        }
        .results-overview span {
            color: #0d1b2a;
        }
        .results-overview__details {
            display: flex;
            flex-wrap: wrap;
            gap: 12px 20px;
            align-items: center;
        }
        .results-overview__metric {
            display: flex;
            align-items: baseline;
            gap: 8px;
        }
        .results-overview__criteria {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            color: #0d1b2a;
            font-size: 0.95rem;
        }
        .results-overview__empty {
            color: #0d1b2a;
            font-size: 0.95rem;
        }
        .results-overview[data-empty="true"] .results-overview__details {
            display: none;
        }
        .results-overview[data-empty="false"] .results-overview__empty {
            display: none;
        }
        @keyframes sectionHighlight {
            from { box-shadow: 0 0 0 rgba(13, 110, 253, 0); }
            to { box-shadow: 0 0 0 rgba(13, 110, 253, 0); }
        }
        @keyframes searchFormSpinner {
            from {
                transform: translateY(-50%) rotate(0deg);
            }
            to {
                transform: translateY(-50%) rotate(360deg);
            }
        }
        .stats {
            display: grid;
            gap: 20px;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background: #f1f3f5;
            padding: 24px;
            border-radius: 12px;
            border: 1px solid rgba(13, 27, 42, 0.08);
            box-shadow: 0 10px 30px rgba(13, 27, 42, 0.05);
            display: flex;
            flex-direction: column;
            gap: 8px;
            text-align: left;
        }
        .stat-card h3 {
            margin: 0;
            font-size: 0.85rem;
            color: #495057;
            text-transform: uppercase;
            letter-spacing: 0.08em;
        }
        .stat-card__value {
            margin: 0;
            font-size: 2.3rem;
            font-weight: 700;
            color: #0d1b2a;
        }
        .stat-card__meta {
            margin: 0;
            font-size: 0.95rem;
            color: #495057;
            line-height: 1.4;
        }
        .analytics-panels {
            display: flex;
            flex-direction: column;
            gap: 28px;
        }
        .analytics-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
            background: #fff;
            border: 1px solid rgba(13, 27, 42, 0.06);
            border-radius: 16px;
            padding: 24px;
            box-shadow: inset 0 0 0 1px rgba(13, 27, 42, 0.03);
        }
        .analytics-panel header h3 {
            margin: 0;
            color: #0d1b2a;
            font-size: 1.2rem;
        }
        .analytics-panel header p {
            margin: 4px 0 0;
            color: #495057;
            max-width: 720px;
        }
        .analytics-charts {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            gap: 24px;
        }
        .chart-card {
            background: rgba(239, 244, 255, 0.6);
            border: 1px solid rgba(13, 27, 42, 0.08);
            border-radius: 16px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        .chart-card figure,
        .chart-card canvas {
            width: 100%;
        }
        .chart-card canvas {
            min-height: 260px;
        }
        .chart-card figcaption {
            margin: 0;
            font-size: 0.9rem;
            color: #495057;
        }
        .insight-card {
            background: rgba(248, 249, 250, 0.8);
            border: 1px solid rgba(13, 27, 42, 0.08);
            border-radius: 16px;
            padding: 20px;
        }
        .insight-card h4 {
            margin: 0 0 12px;
            color: #0d1b2a;
        }
        .insight-card ul {
            margin: 0;
            padding-left: 20px;
            color: #495057;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .insight-card li strong {
            color: #0d1b2a;
        }
        .ai-status {
            background: rgba(13, 27, 42, 0.04);
            border: 1px solid rgba(13, 27, 42, 0.12);
            border-radius: 12px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        .ai-status[data-ai-config="missing"] {
            border-color: rgba(220, 53, 69, 0.45);
            background: rgba(220, 53, 69, 0.08);
        }
        .ai-status__headline {
            margin: 0;
            font-size: 0.95rem;
            color: #0d1b2a;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }
        .ai-status__headline span {
            font-weight: 600;
        }
        .ai-status__warning {
            margin: 0;
            color: #dc3545;
            font-size: 0.9rem;
        }
        .ai-status__details {
            margin: 0;
            display: grid;
            gap: 12px;
        }
        .ai-status__details div {
            display: grid;
            gap: 4px;
        }
        .ai-status__details dt {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: #495057;
        }
        .ai-status__details dd {
            margin: 0;
            font-weight: 600;
            color: #0d1b2a;
        }
        .ai-status__hint {
            margin: 0;
            font-size: 0.9rem;
            color: #495057;
        }
        .ai-status code {
            background: rgba(13, 27, 42, 0.08);
            padding: 2px 6px;
            border-radius: 4px;
        }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; font-size: 14px; }
        th, td { padding: 12px 15px; border: 1px solid #ddd; text-align: left; }
        th { background-color: #007bff; color: white; }
        tr:nth-child(even) { background-color: #f8f9fa; }
        .btn, button { padding: 9px 16px; border: none; border-radius: 8px; color: white; cursor: pointer; text-decoration: none; font-size: 14px; display: inline-block; text-align: center; font-weight: 600; letter-spacing: 0.02em; }
        .btn-edit { background-color: #ffc107; color: #212529;}
        .btn-new { background-color: #28a745; }
        .btn-logout { background-color: #dc3545; }
        .btn-backup { background-color: #17a2b8; margin-right: 10px; }
        .btn-delete { background-color: #dc3545; }
        .btn-import { background-color: #6610f2; }
        .btn-download { background-color: #20c997; }
        .btn-outline {
            background: rgba(13, 27, 42, 0.04);
            color: #0d1b2a;
            border: 1px solid rgba(13, 27, 42, 0.2);
        }
        .btn-outline:hover,
        .btn-outline:focus {
            background: rgba(13, 27, 42, 0.08);
            color: #0d1b2a;
        }
        .btn-icon {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        .table-container { overflow-x: auto; }
        .search-form {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            gap: 12px;
            background: none;
            padding: 0;
            border: none;
        }
        .search-form::after {
            content: "";
            position: absolute;
            top: 18px;
            right: 18px;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            border: 2px solid rgba(13, 27, 42, 0.2);
            border-top-color: #0d6efd;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s ease;
            transform: translateY(-50%);
            transform-origin: center;
            animation: searchFormSpinner 0.8s linear infinite;
        }
        .search-form.is-loading {
            opacity: 0.6;
            pointer-events: none;
        }
        .search-form.is-loading::after {
            opacity: 1;
        }
        .search-form label {
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: #495057;
        }
        .search-form input[type="text"],
        .search-form select {
            padding: 10px 12px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 15px;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }
        .search-form input[type="text"]:focus,
        .search-form select:focus {
            border-color: #0d6efd;
            outline: none;
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.2);
        }
        .search-status {
            display: none;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
            color: #0d1b2a;
        }
        .search-form.is-loading .search-status {
            display: inline-flex;
        }
        .search-summary {
            display: block;
            margin-top: 8px;
            font-size: 0.9rem;
            color: #0d1b2a;
            min-height: 1.2em;
        }
        .search-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }
        .search-actions button,
        .search-actions a {
            flex: 1 1 auto;
        }
        .status { padding: 5px 10px; border-radius: 4px; color: white; text-align: center; font-weight: bold; }
        .status-confirmado { background-color: #28a745; }
        .status-pendiente { background-color: #6c757d; }
        .status-rechazado { background-color: #dc3545; }
        .link-cell {
            word-break: break-all;
            font-size: 12px;
        }
        .link-cell-content {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
            max-width: 100%;
        }
        .link-cell a {
            color: #007bff;
        }
        .link-cell-url {
            word-break: break-all;
            overflow-wrap: anywhere;
            max-width: 100%;
            flex: 1 1 180px;
        }
        .btn-copy-link {
            background-color: #1b263b;
            color: #fff;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        .btn-copy-link:hover,
        .btn-copy-link:focus {
            background-color: #0d6efd;
            outline: none;
        }
        .btn-copy-link:focus-visible {
            outline: none;
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.35);
        }
        .btn-copy-link .btn-copy-link__label {
            font-weight: 600;
            letter-spacing: 0.02em;
        }
        .alert { margin: 20px 0; padding: 15px; border-radius: 6px; border: 1px solid transparent; }
        .alert-exito { background-color: #d4edda; color: #155724; border-color: #c3e6cb; }
        .alert-error { background-color: #f8d7da; color: #721c24; border-color: #f5c6cb; }
        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center;
        }
        .alert-stack {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        .import-form {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
        }
        .import-form input[type="file"] {
            font-size: 13px;
        }
        .btn-secondary { background-color: #6c757d; }
        .btn-search { background-color: #007bff; }
        .alert-info { background-color: #d1ecf1; color: #0c5460; border-color: #bee5eb; }
        .download-actions { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 16px; }
        .tools-actions { display: flex; flex-direction: column; gap: 16px; margin-top: 16px; }
        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 16px;
            flex-wrap: wrap;
            margin-bottom: 32px;
        }
        .admin-header h1 {
            font-size: 2rem;
            color: #0d1b2a;
            margin: 0;
        }
        .admin-header-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }
        .section-intro {
            color: #6c757d;
            margin-top: 0;
            margin-bottom: 24px;
            max-width: 720px;
        }
        .cards-grid {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        }
        .card {
            background: #f8f9fa;
            border: 1px solid rgba(13, 27, 42, 0.08);
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 10px 30px rgba(13, 27, 42, 0.05);
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        .card.is-active {
            border-color: rgba(13, 110, 253, 0.35);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.15);
        }
        .card h3 {
            margin: 0;
            color: #0d1b2a;
        }
        .card p {
            margin: 0;
            color: #495057;
            line-height: 1.5;
        }
        .card form {
            width: 100%;
        }
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        .search-actions button,
        .search-actions a {
            flex: 1 1 auto;
        }
        .download-card .download-actions {
            margin-top: 0;
        }
        .download-card .download-actions a {
            flex: 1 1 200px;
        }
        .tools-card ul {
            margin: 0;
            padding-left: 18px;
            color: #495057;
        }
        .tools-card li + li {
            margin-top: 8px;
        }
        @media (max-width: 960px) {
            .admin-shell {
                flex-direction: column;
            }
            .admin-sidebar {
                position: static;
                width: 100%;
                display: flex;
                flex-direction: column;
                height: auto;
                max-height: none;
                overflow: visible;
                border-bottom: 1px solid rgba(255, 255, 255, 0.2);
                box-shadow: none;
            }
            .admin-nav {
                overflow: visible;
                padding-right: 0;
            }
            .admin-sidebar .sidebar-actions {
                margin-top: 24px;
                flex-direction: column;
                gap: 10px;
            }
            .admin-content {
                padding: 32px 20px 56px;
            }
            .container {
                padding: 28px 20px;
            }
            .section-block {
                padding: 24px;
            }
            .sidebar-group-links {
                flex-direction: row;
                flex-wrap: wrap;
                gap: 8px;
            }
            .admin-nav a {
                flex: 1 1 calc(50% - 8px);
                text-align: left;
            }
        }
        @media (max-width: 600px) {
            .sidebar-group-links {
                flex-direction: column;
            }
            .admin-content {
                padding: 24px 16px 48px;
            }
            .container {
                padding: 24px 16px;
            }
            .section-block {
                padding: 20px;
            }
            .search-actions {
                flex-direction: column;
            }
            .admin-header {
                flex-direction: column;
                align-items: flex-start;
            }
            .admin-header-actions {
                width: 100%;
                justify-content: flex-start;
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.6/dist/chart.umd.min.js" defer></script>
</head>
<body>
<div class="admin-shell">
    <aside class="admin-sidebar">
        <div class="sidebar-header">
            <h1>Panel de Invitados</h1>
            <p class="sidebar-description">Administrá la lista con accesos rápidos agrupados por tarea. Elegí qué querés hacer y te llevamos directo a esa sección.</p>
        </div>
        <nav class="admin-nav" aria-label="Navegación del panel">
            <div class="sidebar-group">
                <p class="sidebar-group-title">Gestión de invitados</p>
                <div class="sidebar-group-links">
                    <a href="#filtros" class="is-active" data-section="#carga" data-scroll-target="#filtros">Búsqueda y filtros</a>
                    <a href="#carga-masiva" data-section="#carga" data-scroll-target="#carga-masiva">Carga masiva</a>
                    <a href="#invitados">Resumen general</a>
                </div>
            </div>
            <div class="sidebar-group">
                <p class="sidebar-group-title">Reportes y respaldos</p>
                <div class="sidebar-group-links">
                    <a href="#descargas">Descargas</a>
                </div>
            </div>
            <div class="sidebar-group">
                <p class="sidebar-group-title">Herramientas</p>
                <div class="sidebar-group-links">
                    <a href="#herramientas">Accesos rápidos</a>
                    <a href="#borrar-datos" data-section="#herramientas" data-scroll-target="#borrar-datos">Borrar invitados</a>
                </div>
            </div>
        </nav>
        <div class="sidebar-divider" aria-hidden="true"></div>
        <div class="sidebar-actions">
            <p class="sidebar-actions-title">Acciones rápidas</p>
            <a class="btn btn-new btn-icon" href="/admin/invitado/nuevo">
                <span aria-hidden="true">＋</span>
                Nuevo invitado
            </a>
            <a class="btn btn-outline btn-icon" href="#invitados">
                Ver listado
            </a>
        </div>
    </aside>
    <main class="admin-content">
        <div class="container">
            <header class="admin-header">
                <h1>Panel de invitados</h1>
                <div class="admin-header-actions">
                    <a class="btn btn-outline btn-icon" href="/">
                        <span aria-hidden="true">⟵</span>
                        Volver al sitio
                    </a>
                    <form action="/admin-logout" method="get">
                        <button class="btn btn-logout btn-icon" type="submit">
                            <span aria-hidden="true">⎋</span>
                            Cerrar sesión
                        </button>
                    </form>
                </div>
            </header>
            <div class="section-stack">
            <section id="carga" class="admin-section">
                <div class="section-block">
                    <header class="section-header">
                        <div>
                            <h2>Carga y búsqueda</h2>
                            <p class="section-intro">Encontrá invitados específicos o subí listados completos sin pisar los registros existentes. Cada herramienta está separada para que puedas trabajar con tranquilidad.</p>
                        </div>
                    </header>
                    <div class="section-body">
                        <% const filtrosActivos = Boolean((termino && termino.trim()) || (estadoSeleccionado && estadoSeleccionado !== 'todos')); %>
                        <% const estadoLegible = estadoSeleccionado && estadoSeleccionado !== 'todos' ? estadoSeleccionado.charAt(0).toUpperCase() + estadoSeleccionado.slice(1) : 'Cualquier estado'; %>
                        <div class="results-overview" data-results-overview data-empty="<%= filtrosActivos ? 'false' : 'true' %>">
                            <div class="results-overview__empty" data-overview-empty>
                                <strong>Vista completa.</strong>
                                <span>Aplicá filtros para destacar los criterios activos y los resultados acá mismo.</span>
                            </div>
                            <div class="results-overview__details" data-overview-details>
                                <div class="results-overview__metric">
                                    <strong data-overview-total><%= invitados.length %></strong>
                                    <span data-overview-label><%= invitados.length === 1 ? 'invitación coincide' : 'invitaciones coinciden' %></span>
                                </div>
                                <div class="results-overview__criteria">
                                    <span data-overview-termino><%= (termino && termino.trim()) ? `Nombre o apellido contiene “${termino.trim()}”` : 'Sin filtro por nombre' %></span>
                                    <span data-overview-estado><%= estadoLegible === 'Cualquier estado' ? 'Estado: cualquier estado' : `Estado: ${estadoLegible}` %></span>
                                </div>
                            </div>
                        </div>
                        <div class="section-columns cards-grid">
                            <article id="filtros" class="card" data-card-anchor>
                                <h3>Búsqueda rápida</h3>
                                <p>Filtrá por nombre o apellido para revisar, editar o eliminar una invitación en segundos.</p>
                                <form class="search-form" data-search-form action="/admin/invitados" method="get">
                                    <label for="buscar">Buscar invitado</label>
                                    <input id="buscar" type="text" name="q" placeholder="Ej: María" value="<%= termino || '' %>">
                                    <label for="estado">Estado</label>
                                    <select id="estado" name="estado">
                                        <option value="todos" <%= estadoSeleccionado === 'todos' ? 'selected' : '' %>>Todos</option>
                                        <option value="confirmado" <%= estadoSeleccionado === 'confirmado' ? 'selected' : '' %>>Confirmados</option>
                                        <option value="pendiente" <%= estadoSeleccionado === 'pendiente' ? 'selected' : '' %>>Pendientes</option>
                                        <option value="rechazado" <%= estadoSeleccionado === 'rechazado' ? 'selected' : '' %>>Rechazados</option>
                                    </select>
                                    <div class="search-actions">
                                        <button type="submit" class="btn btn-search">Buscar</button>
                                        <a class="btn btn-secondary" href="/admin/invitados" data-action="clear">Limpiar</a>
                                    </div>
                                    <div class="search-status" role="status" aria-live="polite" aria-hidden="true" data-search-status>
                                        Buscando…
                                    </div>
                                    <div class="search-summary" data-search-summary aria-live="polite"></div>
                                </form>
                            </article>
                            <article id="carga-masiva" class="card" data-card-anchor>
                                <h3>Carga masiva</h3>
                                <p>Importá un archivo XLSX, XLS o CSV. Los datos nuevos se agregan sin sobrescribir la información existente.</p>
                                <form class="import-form" action="/upload" method="post" enctype="multipart/form-data">
                                    <label for="excel" class="visually-hidden">Seleccionar archivo</label>
                                    <input type="file" id="excel" name="excel" accept=".xlsx,.xls,.csv">
                                    <button type="submit" class="btn btn-import btn-icon">
                                        <span aria-hidden="true">⬆</span>
                                        Importar archivo
                                    </button>
                                </form>
                                <small style="color: #6c757d;">Consejo: descargá un respaldo antes de cargar un archivo nuevo.</small>
                            </article>
                        </div>
                        <div class="alert-stack" data-alert-container aria-live="polite" aria-atomic="true">
                            <% (alerts || []).forEach(alerta => { %>
                                <div class="alert alert-<%= alerta.tipo %>"><%= alerta.texto %></div>
                            <% }); %>
                        </div>
                    </div>
                </div>
            </section>

            <section id="descargas" class="admin-section">
                <div class="section-block section-block--subtle">
                    <header class="section-header">
                        <div>
                            <h2>Descargas</h2>
                            <p class="section-intro">Generá copias actualizadas para trabajar sin conexión o compartir con tu equipo.</p>
                        </div>
                    </header>
                    <div class="section-body">
                        <div class="cards-grid">
                            <div class="card download-card">
                                <h3>Respaldos y reportes</h3>
                                <p>Elegí qué querés descargar o restaurar según la tarea que necesites completar.</p>
                                <div class="download-actions">
                                    <a class="btn btn-backup btn-icon" href="/admin/backup">
                                        <span aria-hidden="true">💾</span>
                                        Descargar respaldo
                                    </a>
                                    <a class="btn btn-download btn-icon" href="/admin/descargar-links">
                                        <span aria-hidden="true">🔗</span>
                                        Links personalizados
                                    </a>
                                    <a class="btn btn-secondary btn-icon" href="/admin/descargar-confirmaciones">
                                        <span aria-hidden="true">✅</span>
                                        Confirmaciones
                                    </a>
                                </div>
                                <form class="restore-form" action="/admin/restaurar-backup" method="post" enctype="multipart/form-data">
                                    <label for="backup" class="visually-hidden">Seleccionar archivo de respaldo</label>
                                    <input type="file" id="backup" name="backup" accept="application/json,.json" required>
                                    <button type="submit" class="btn btn-secondary btn-icon">
                                        <span aria-hidden="true">↩️</span>
                                        Restaurar respaldo
                                    </button>
                                </form>
                                <small style="color: #6c757d; display: block; margin-top: 0.5rem;">Al restaurar se reemplazarán los registros actuales por los del archivo seleccionado.</small>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section id="invitados" class="admin-section">
                <div class="section-block section-block--table">
                    <header class="section-header">
                        <div>
                            <h2>Resumen de invitados</h2>
                            <p class="section-intro">Visualizá el comportamiento general y accedé rápido al detalle para cada invitación.</p>
                        </div>
                    </header>
                    <div class="section-body">
                        <%
                            const safeNumber = (value) => {
                                const num = Number(value);
                                return Number.isFinite(num) ? num : 0;
                            };
                            const totalGruposDefault = safeNumber(invitados.length);
                            const totalPersonasDefault = safeNumber(totalInvitados);
                            const confirmadosDefault = safeNumber(confirmados);
                            const gruposPendientesDefault = safeNumber(pendientes);
                            const gruposRechazadosDefault = safeNumber(rechazados);
                            const gruposConfirmadosEstimado = Math.max(totalGruposDefault - gruposPendientesDefault - gruposRechazadosDefault, 0);
                            const personasPendientesDefault = Math.max(totalPersonasDefault - confirmadosDefault, 0);
                            const analytics = stats || {
                                totalGrupos: totalGruposDefault,
                                totalPersonas: totalPersonasDefault,
                                confirmados: confirmadosDefault,
                                pendientes: gruposPendientesDefault,
                                rechazados: gruposRechazadosDefault,
                                personasPendientes: personasPendientesDefault,
                                personasRechazadas: 0,
                                capacidadDisponible: personasPendientesDefault,
                                porcentajeConfirmacion: totalPersonasDefault > 0 ? Number(((confirmadosDefault / totalPersonasDefault) * 100).toFixed(1)) : 0,
                                porcentajeRespuesta: totalGruposDefault > 0 ? Number((((totalGruposDefault - gruposPendientesDefault) / totalGruposDefault) * 100).toFixed(1)) : 0,
                                gruposRespondieron: Math.max(totalGruposDefault - gruposPendientesDefault, 0),
                                gruposConAsistenciaParcial: 0,
                                promedioPersonasGrupo: totalGruposDefault > 0 ? Number((totalPersonasDefault / totalGruposDefault).toFixed(1)) : 0,
                                promedioAsistentesPorGrupoConfirmado: gruposConfirmadosEstimado > 0 ? Number((confirmadosDefault / gruposConfirmadosEstimado).toFixed(1)) : 0,
                                costoPorPersonaARS: 0,
                                costoConfirmadosARS: 0,
                                costoPendienteARS: 0,
                                capacidadPlaneada: 0,
                                capacidadRestanteEvento: 0,
                                porcentajeOcupacionPlaneada: 0,
                                distribucionGrupos: {
                                    confirmado: gruposConfirmadosEstimado,
                                    pendiente: gruposPendientesDefault,
                                    rechazado: gruposRechazadosDefault
                                },
                                distribucionPersonas: {
                                    confirmadas: confirmadosDefault,
                                    pendientes: personasPendientesDefault,
                                    rechazadas: 0
                                }
                            };
                            const formatInteger = (value) => Number(value || 0).toLocaleString('es-AR');
                            const formatDecimal = (value) => Number(value || 0).toLocaleString('es-AR', { minimumFractionDigits: 1, maximumFractionDigits: 1 });
                            const formatPercent = (value) => `${formatDecimal(value)}%`;
                            const formatCurrency = (value) => `$ (ARS) ${Number(value || 0).toLocaleString('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                        %>
                        <div class="analytics-panels">
                            <section class="analytics-panel">
                                <header>
                                    <h3>Indicadores generales</h3>
                                    <p>Resumen de volumen y estado de las invitaciones para dimensionar la asistencia.</p>
                                </header>
                                <div class="metrics-grid">
                                    <article class="stat-card">
                                        <h3>Invitaciones (Grupos)</h3>
                                        <p class="stat-card__value" data-stat="grupos"><%= formatInteger(analytics.totalGrupos) %></p>
                                        <p class="stat-card__meta">Cantidad de invitaciones agrupadas por familia o mesa.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Invitados (Personas)</h3>
                                        <p class="stat-card__value" data-stat="personas"><%= formatInteger(analytics.totalPersonas) %></p>
                                        <p class="stat-card__meta">Personas incluidas en todas las invitaciones.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Personas confirmadas</h3>
                                        <p class="stat-card__value" data-stat="confirmados"><%= formatInteger(analytics.confirmados) %></p>
                                        <p class="stat-card__meta">Asistentes que ya confirmaron su presencia.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Invitaciones pendientes</h3>
                                        <p class="stat-card__value" data-stat="pendientes"><%= formatInteger(analytics.pendientes) %></p>
                                        <p class="stat-card__meta">Grupos que todavía no respondieron.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Invitaciones rechazadas</h3>
                                        <p class="stat-card__value" data-stat="rechazados"><%= formatInteger(analytics.rechazados) %></p>
                                        <p class="stat-card__meta">Grupos que comunicaron que no asistirán.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Personas que no asistirán</h3>
                                        <p class="stat-card__value" data-stat="personas-rechazadas"><%= formatInteger(analytics.personasRechazadas) %></p>
                                        <p class="stat-card__meta">Personas incluidas en invitaciones rechazadas.</p>
                                    </article>
                                </div>
                            </section>
                            <section class="analytics-panel">
                                <header>
                                    <h3>Indicadores estratégicos</h3>
                                    <p>Datos para planificar logística, presupuesto y acciones de seguimiento.</p>
                                </header>
                                <div class="metrics-grid">
                                    <article class="stat-card">
                                        <h3>Tasa de confirmación</h3>
                                        <p class="stat-card__value" data-stat="porcentaje-confirmacion"><%= formatPercent(analytics.porcentajeConfirmacion) %></p>
                                        <p class="stat-card__meta">Porcentaje de personas confirmadas sobre el total invitado.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Tasa de respuesta</h3>
                                        <p class="stat-card__value" data-stat="porcentaje-respuesta"><%= formatPercent(analytics.porcentajeRespuesta) %></p>
                                        <p class="stat-card__meta">Invitaciones que ya respondieron (sí o no).</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Grupos con respuesta</h3>
                                        <p class="stat-card__value" data-stat="grupos-respondieron"><%= formatInteger(analytics.gruposRespondieron) %></p>
                                        <p class="stat-card__meta">Invitaciones que confirmaron o rechazaron.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Personas por confirmar</h3>
                                        <p class="stat-card__value" data-stat="personas-pendientes"><%= formatInteger(analytics.personasPendientes) %></p>
                                        <p class="stat-card__meta">Personas sin respuesta o con asistencia parcial.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Capacidad disponible</h3>
                                        <p class="stat-card__value" data-stat="capacidad-disponible"><%= formatInteger(analytics.capacidadDisponible) %></p>
                                        <p class="stat-card__meta">Cupos libres considerando confirmaciones y rechazos.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Asistencia parcial</h3>
                                        <p class="stat-card__value" data-stat="grupos-parciales"><%= formatInteger(analytics.gruposConAsistenciaParcial) %></p>
                                        <p class="stat-card__meta">Grupos que confirmaron menos personas de las invitadas.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Promedio por grupo</h3>
                                        <p class="stat-card__value" data-stat="promedio-personas"><%= formatDecimal(analytics.promedioPersonasGrupo) %></p>
                                        <p class="stat-card__meta">Personas promedio por invitación enviada.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Promedio confirmados</h3>
                                        <p class="stat-card__value" data-stat="promedio-asistentes-grupo"><%= formatDecimal(analytics.promedioAsistentesPorGrupoConfirmado) %></p>
                                        <p class="stat-card__meta">Asistentes promedio entre las invitaciones confirmadas.</p>
                                    </article>
                                    <% if (analytics.costoPorPersonaARS > 0) { %>
                                    <article class="stat-card">
                                        <h3>Costo por persona</h3>
                                        <p class="stat-card__value" data-stat="costo-persona"><%= formatCurrency(analytics.costoPorPersonaARS) %></p>
                                        <p class="stat-card__meta">Valor presupuestado por persona en pesos argentinos.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Inversión confirmada</h3>
                                        <p class="stat-card__value" data-stat="costo-confirmados"><%= formatCurrency(analytics.costoConfirmadosARS) %></p>
                                        <p class="stat-card__meta">Estimación total para quienes ya confirmaron.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Compromiso potencial</h3>
                                        <p class="stat-card__value" data-stat="costo-pendiente"><%= formatCurrency(analytics.costoPendienteARS) %></p>
                                        <p class="stat-card__meta">Monto adicional si confirman las personas pendientes.</p>
                                    </article>
                                    <% } %>
                                    <% if (analytics.capacidadPlaneada > 0) { %>
                                    <article class="stat-card">
                                        <h3>Capacidad planificada</h3>
                                        <p class="stat-card__value" data-stat="capacidad-planeada"><%= formatInteger(analytics.capacidadPlaneada) %></p>
                                        <p class="stat-card__meta">Cupos totales definidos para el evento.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Cupos disponibles (plan)</h3>
                                        <p class="stat-card__value" data-stat="capacidad-restante-evento"><%= formatInteger(analytics.capacidadRestanteEvento) %></p>
                                        <p class="stat-card__meta">Disponibles según la capacidad planificada.</p>
                                    </article>
                                    <article class="stat-card">
                                        <h3>Ocupación planificada</h3>
                                        <p class="stat-card__value" data-stat="capacidad-ocupada-porcentaje"><%= formatPercent(analytics.porcentajeOcupacionPlaneada) %></p>
                                        <p class="stat-card__meta">Nivel de ocupación frente al cupo máximo.</p>
                                    </article>
                                    <% } %>
                                </div>
                            </section>
                            <section class="analytics-panel">
                                <header>
                                    <h3>Visualizaciones y alertas</h3>
                                    <p>Gráficos y resumen textual para compartir con tu equipo.</p>
                                </header>
                                <div class="analytics-charts">
                                    <figure class="chart-card">
                                        <canvas id="chart-estado-grupos" aria-label="Distribución de invitaciones por estado (grupos)" role="img"></canvas>
                                        <figcaption>Comparativa de grupos confirmados, pendientes y rechazados. Valores expresados en cantidad de invitaciones.</figcaption>
                                    </figure>
                                    <figure class="chart-card">
                                        <canvas id="chart-estado-personas" aria-label="Distribución de personas según respuesta" role="img"></canvas>
                                        <figcaption>Personas confirmadas, pendientes y que no asistirán. Valores expresados en cantidad de personas.</figcaption>
                                    </figure>
                                </div>
                                <article class="insight-card">
                                    <h4>Resumen ejecutivo</h4>
                                    <ul>
                                        <li><strong>Confirmaciones:</strong> <span data-stat="confirmados"><%= formatInteger(analytics.confirmados) %></span> personas sobre un total de <span data-stat="personas"><%= formatInteger(analytics.totalPersonas) %></span>.</li>
                                        <li><strong>Por gestionar:</strong> <span data-stat="personas-pendientes"><%= formatInteger(analytics.personasPendientes) %></span> personas distribuidas en <span data-stat="pendientes"><%= formatInteger(analytics.pendientes) %></span> invitaciones.</li>
                                        <li><strong>No asistirán:</strong> <span data-stat="personas-rechazadas"><%= formatInteger(analytics.personasRechazadas) %></span> personas ya rechazaron la invitación.</li>
                                        <% if (analytics.costoPorPersonaARS > 0) { %>
                                        <li><strong>Presupuesto confirmado:</strong> <span data-stat="costo-confirmados"><%= formatCurrency(analytics.costoConfirmadosARS) %></span> con un costo unitario de <span data-stat="costo-persona"><%= formatCurrency(analytics.costoPorPersonaARS) %></span>.</li>
                                        <% } %>
                                        <% if (analytics.capacidadPlaneada > 0) { %>
                                        <li><strong>Cupos restantes:</strong> <span data-stat="capacidad-restante-evento"><%= formatInteger(analytics.capacidadRestanteEvento) %></span> lugares disponibles dentro de la capacidad planificada (<span data-stat="capacidad-planeada"><%= formatInteger(analytics.capacidadPlaneada) %></span>).</li>
                                        <% } %>
                                    </ul>
                                </article>
                            </section>
                        </div>
                        <div class="table-container">
                            <table>
                                <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Apellido</th>
                                    <th>Invitados (Grupo)</th>
                                    <th>Asistirán</th>
                                    <th>Estado</th>
                                    <th>Link</th>
                                    <th>Acciones</th>
                                </tr>
                                </thead>
                                <tbody data-table-body>
                                <% invitados.forEach(invitado => { %>
                                    <tr>
                                        <td><%= invitado.nombre %></td>
                                        <td><%= invitado.apellido || '-' %></td>
                                        <td><%= invitado.cantidad %></td>
                                        <td><%= invitado.confirmados %></td>
                                        <td>
                                            <span class="status status-<%= invitado.estado.toLowerCase() %>">
                                                <%= invitado.estado %>
                                            </span>
                                        </td>
                                        <td class="link-cell">
                                            <div class="link-cell-content">
                                                <a class="link-cell-url" target="_blank" href="<%= baseUrl %>/confirmar/<%= invitado.id %>"><%= baseUrl %>/confirmar/<%= invitado.id %></a>
                                                <% const nombreCompleto = [invitado.nombre, invitado.apellido || ''].filter(Boolean).join(' '); %>
                                                <button type="button" class="btn-copy-link" data-action="copy-link" data-link="<%= baseUrl %>/confirmar/<%= invitado.id %>">
                                                    <span aria-hidden="true">📋</span>
                                                    <span class="btn-copy-link__label">Copiar link</span>
                                                    <span class="visually-hidden"><%= nombreCompleto ? `de ${nombreCompleto}` : 'del invitado' %></span>
                                                </button>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                <a href="/admin/invitado/editar/<%= invitado.id %>" class="btn btn-edit">Editar</a>
                                                <form action="/admin/invitado/eliminar/<%= invitado.id %>" method="POST" data-ajax-delete data-invitado-id="<%= invitado.id %>" data-invitado-nombre="<%= [invitado.nombre, invitado.apellido || ''].filter(Boolean).join(' ') %>">
                                                    <button type="submit" class="btn btn-delete">Eliminar</button>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </section>

            <section id="herramientas" class="admin-section">
                <div class="section-block">
                    <header class="section-header">
                        <div>
                            <h2>Herramientas adicionales</h2>
                            <p class="section-intro">Atajos para mantener la base ordenada y realizar tareas de mantenimiento cuando sea necesario.</p>
                        </div>
                    </header>
                    <div class="section-body">
                        <%
                            const aiPublic = ai || (locals.ai || {});
                            const aiMissingVars = Array.isArray(aiPublic.missing) ? aiPublic.missing : [];
                            const aiEndpointLabel = aiPublic.endpoint ? aiPublic.endpoint : 'Valor por defecto';
                            const aiLocaleLabel = aiPublic.defaultLocale || 'es-AR';
                        %>
                        <div class="cards-grid">
                            <article id="herramientas-accesos" class="card tools-card" data-card-anchor>
                                <h3>Accesos rápidos</h3>
                                <p>Mantené tu listado actualizado y limpio con estas acciones frecuentes.</p>
                                <% if (mensajeReset) { %>
                                    <div class="alert alert-exito"><%= mensajeReset %></div>
                                <% } %>
                                <ul>
                                    <li><a href="/admin/invitado/nuevo">Agregar una nueva invitación</a></li>
                                    <li><a href="/admin/invitados">Ver listado completo</a></li>
                                </ul>
                            </article>
                            <article id="borrar-datos" class="card tools-card" data-card-anchor>
                                <h3>Mantenimiento de datos</h3>
                                <p>Cuando necesites reiniciar la lista, podés borrar todos los registros de manera segura. Descargá un respaldo antes de continuar.</p>
                                <div class="tools-actions">
                                    <form action="/admin/borrar-todo" method="post" onsubmit="return confirm('¿Seguro que querés borrar todos los datos? Esta acción no se puede deshacer.');">
                                        <button type="submit" class="btn btn-delete btn-icon">
                                            <span aria-hidden="true">🗑</span>
                                            Borrar todos los invitados
                                        </button>
                                    </form>
                                </div>
                            </article>
                            <article id="configuracion-ia" class="card tools-card" data-card-anchor>
                                <h3>Configuración de IA</h3>
                                <p>Verificá el estado de la integración con el asistente inteligente del panel.</p>
                                <div class="ai-status" data-ai-config="<%= aiPublic.isConfigured ? 'ok' : 'missing' %>">
                                    <p class="ai-status__headline">
                                        <strong>Estado:</strong>
                                        <span><%= aiPublic.isConfigured ? 'Configuración correcta' : 'Faltan credenciales' %></span>
                                    </p>
                                    <% if (!aiPublic.isConfigured && aiMissingVars.length) { %>
                                        <p class="ai-status__warning">Variables faltantes: <code><%= aiMissingVars.join(', ') %></code>.</p>
                                    <% } %>
                                    <dl class="ai-status__details">
                                        <div>
                                            <dt>Proveedor</dt>
                                            <dd><%= aiPublic.provider || 'No definido' %></dd>
                                        </div>
                                        <div>
                                            <dt>Modelo</dt>
                                            <dd><%= aiPublic.model || 'No definido' %></dd>
                                        </div>
                                        <div>
                                            <dt>Endpoint</dt>
                                            <dd><%= aiEndpointLabel %></dd>
                                        </div>
                                        <div>
                                            <dt>Locale</dt>
                                            <dd><%= aiLocaleLabel %></dd>
                                        </div>
                                    </dl>
                                    <p class="ai-status__hint">Editá <code>config/ai.js</code> y configurá las variables <code>AI_API_KEY</code> y <code>AI_MODEL</code> para habilitar la IA.</p>
                                </div>
                            </article>
                        </div>
                    </div>
                </div>
            </section>
            </div>
        </div>
    </main>
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = Array.from(document.querySelectorAll('.admin-nav a'));
        const sections = Array.from(document.querySelectorAll('.admin-section'));
        const anchorCards = Array.from(document.querySelectorAll('[data-card-anchor]'));
        let activeHash = null;

        const getTargetHash = (link) => link.dataset.scrollTarget || link.getAttribute('href');
        const getSectionHash = (link) => link.dataset.section || getTargetHash(link);
        const resolveLink = (hash) => navLinks.find(link => getTargetHash(link) === hash);

        const activate = (hash, { updateHistory = false } = {}) => {
            const fallbackHash = navLinks.length
                ? getTargetHash(navLinks[0])
                : (sections.length ? `#${sections[0].id}` : '#');
            const normalizedHash = hash && hash.startsWith('#') ? hash : fallbackHash;
            const activeLink = resolveLink(normalizedHash) || navLinks[0] || null;

            navLinks.forEach(link => {
                const isActive = link === activeLink;
                link.classList.toggle('is-active', isActive);
                if (isActive) {
                    link.setAttribute('aria-current', 'true');
                } else {
                    link.removeAttribute('aria-current');
                }
            });

            const sectionHash = activeLink ? getSectionHash(activeLink) : normalizedHash;
            sections.forEach(section => {
                section.classList.toggle('is-active', `#${section.id}` === sectionHash);
            });

            const cardHash = activeLink ? getTargetHash(activeLink) : normalizedHash;
            anchorCards.forEach(card => {
                card.classList.toggle('is-active', `#${card.id}` === cardHash);
            });

            activeHash = normalizedHash;

            if (updateHistory && normalizedHash && window.location.hash !== normalizedHash) {
                history.replaceState(null, '', normalizedHash);
            }
        };

        navLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                const targetHash = getTargetHash(link);
                if (targetHash && targetHash.startsWith('#')) {
                    event.preventDefault();
                    const targetElement = document.querySelector(targetHash);
                    if (targetElement) {
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                    activate(targetHash, { updateHistory: true });
                }
            });
        });

        activate(window.location.hash);
        window.addEventListener('hashchange', () => activate(window.location.hash));

        const findHashForSection = (section) => {
            const sectionHash = `#${section.id}`;
            const relatedLink = navLinks.find(link => (
                getSectionHash(link) === sectionHash || getTargetHash(link) === sectionHash
            ));
            if (!relatedLink) {
                return sectionHash;
            }
            return getTargetHash(relatedLink) || sectionHash;
        };

        const handleSectionActivation = (section) => {
            const nextHash = findHashForSection(section);
            if (nextHash !== activeHash) {
                activate(nextHash, { updateHistory: true });
            }
        };

        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                const visibleSections = entries
                    .filter(entry => entry.isIntersecting)
                    .sort((a, b) => b.intersectionRatio - a.intersectionRatio);

                if (visibleSections.length > 0) {
                    handleSectionActivation(visibleSections[0].target);
                }
            }, {
                root: null,
                threshold: [0.25, 0.5, 0.75],
                rootMargin: '-35% 0px -45% 0px'
            });

            sections.forEach(section => observer.observe(section));
        } else {
            let scrollRaf = null;
            window.addEventListener('scroll', () => {
                if (scrollRaf) {
                    cancelAnimationFrame(scrollRaf);
                }
                scrollRaf = requestAnimationFrame(() => {
                    let bestSection = null;
                    let bestVisibility = -Infinity;

                    sections.forEach(section => {
                        const rect = section.getBoundingClientRect();
                        const visibility = Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
                        if (visibility > bestVisibility && visibility > 0) {
                            bestVisibility = visibility;
                            bestSection = section;
                        }
                    });

                    if (bestSection && bestVisibility > 0) {
                        handleSectionActivation(bestSection);
                    }
                });
            }, { passive: true });
        }

        const searchForm = document.querySelector('[data-search-form]');
        const tableBody = document.querySelector('[data-table-body]');
        const alertContainer = document.querySelector('[data-alert-container]');
        const submitButton = searchForm ? searchForm.querySelector('button[type="submit"]') : null;
        const clearButton = searchForm ? searchForm.querySelector('[data-action="clear"]') : null;
        const inputBuscar = searchForm ? searchForm.querySelector('input[name="q"]') : null;
        const selectEstado = searchForm ? searchForm.querySelector('select[name="estado"]') : null;
        const statusIndicator = searchForm ? searchForm.querySelector('[data-search-status]') : null;
        const summaryContainer = searchForm ? searchForm.querySelector('[data-search-summary]') : null;
        const overviewContainer = document.querySelector('[data-results-overview]');
        const overviewTotal = overviewContainer ? overviewContainer.querySelector('[data-overview-total]') : null;
        const overviewLabel = overviewContainer ? overviewContainer.querySelector('[data-overview-label]') : null;
        const overviewTermino = overviewContainer ? overviewContainer.querySelector('[data-overview-termino]') : null;
        const overviewEstado = overviewContainer ? overviewContainer.querySelector('[data-overview-estado]') : null;
        const statElements = {};
        document.querySelectorAll('[data-stat]').forEach((element) => {
            const key = element.getAttribute('data-stat');
            if (!key) return;
            if (!statElements[key]) {
                statElements[key] = [];
            }
            statElements[key].push(element);
        });
        const chartElements = {
            grupos: document.getElementById('chart-estado-grupos'),
            personas: document.getElementById('chart-estado-personas')
        };
        const chartInstances = {};

        const TEMP_ALERT_IDS = {
            success: 'copy-link-success',
            error: 'copy-link-error'
        };

        if (!searchForm || !tableBody) {
            return;
        }

        if (statusIndicator) {
            statusIndicator.textContent = '';
        }

        if (summaryContainer) {
            summaryContainer.textContent = '';
        }

        const initialState = <%- JSON.stringify({
            termino: termino || "",
            estadoSeleccionado,
            baseUrl,
            invitados,
            stats: typeof stats !== 'undefined' ? stats : null,
            alerts: typeof alerts !== 'undefined' ? alerts : [],
            importSummary: typeof importSummary !== 'undefined' ? importSummary : null,
            ai: typeof ai !== 'undefined' ? ai : null
        }) %>;

        const state = {
            filters: {
                termino: initialState.termino || "",
                estado: initialState.estadoSeleccionado || "todos"
            },
            baseUrl: initialState.baseUrl || window.location.origin,
            importSummary: initialState.importSummary || null
        };

        const numberFormatter = new Intl.NumberFormat('es-AR');
        const decimalFormatter = new Intl.NumberFormat('es-AR', { minimumFractionDigits: 1, maximumFractionDigits: 1 });
        const percentFormatter = new Intl.NumberFormat('es-AR', { minimumFractionDigits: 1, maximumFractionDigits: 1 });
        const currencyFormatter = new Intl.NumberFormat('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

        const toNumeric = (value) => {
            const parsed = Number(value);
            return Number.isFinite(parsed) ? parsed : 0;
        };

        function setStatValue(key, value, formatter) {
            const elements = statElements[key];
            if (!elements || elements.length === 0) return;
            const formatted = formatter(value);
            elements.forEach((el) => {
                el.textContent = formatted;
            });
        }

        function formatIntegerValue(value) {
            return numberFormatter.format(toNumeric(value));
        }

        function formatDecimalValue(value) {
            return decimalFormatter.format(toNumeric(value));
        }

        function formatPercentValue(value) {
            return `${percentFormatter.format(toNumeric(value))}%`;
        }

        function formatCurrencyValue(value) {
            return `$ (ARS) ${currencyFormatter.format(toNumeric(value))}`;
        }

        function updateCharts(stats) {
            if (!window.Chart) return;
            const gruposData = [
                toNumeric(stats?.distribucionGrupos?.confirmado),
                toNumeric(stats?.distribucionGrupos?.pendiente),
                toNumeric(stats?.distribucionGrupos?.rechazado)
            ];
            const personasData = [
                toNumeric(stats?.distribucionPersonas?.confirmadas),
                toNumeric(stats?.distribucionPersonas?.pendientes),
                toNumeric(stats?.distribucionPersonas?.rechazadas)
            ];

            if (chartElements.grupos) {
                if (!chartInstances.grupos) {
                    chartInstances.grupos = new window.Chart(chartElements.grupos.getContext('2d'), {
                        type: 'bar',
                        data: {
                            labels: ['Confirmadas', 'Pendientes', 'Rechazadas'],
                            datasets: [{
                                label: 'Cantidad de invitaciones',
                                data: gruposData,
                                backgroundColor: ['#0d6efd', '#6c757d', '#dc3545']
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    labels: { font: { family: 'inherit' } }
                                },
                                title: {
                                    display: true,
                                    text: 'Distribución de invitaciones (grupos)',
                                    font: { size: 16, family: 'inherit' }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: { display: true, text: 'Cantidad de invitaciones' }
                                },
                                x: {
                                    title: { display: true, text: 'Estado' }
                                }
                            }
                        }
                    });
                } else {
                    chartInstances.grupos.data.datasets[0].data = gruposData;
                    chartInstances.grupos.update();
                }
            }

            if (chartElements.personas) {
                if (!chartInstances.personas) {
                    chartInstances.personas = new window.Chart(chartElements.personas.getContext('2d'), {
                        type: 'doughnut',
                        data: {
                            labels: ['Personas confirmadas', 'Personas pendientes', 'Personas que no asistirán'],
                            datasets: [{
                                label: 'Cantidad de personas',
                                data: personasData,
                                backgroundColor: ['#198754', '#ffc107', '#dc3545']
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    position: 'bottom',
                                    labels: { font: { family: 'inherit' } }
                                },
                                title: {
                                    display: true,
                                    text: 'Distribución de personas según respuesta',
                                    font: { size: 16, family: 'inherit' }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: (context) => {
                                            const value = toNumeric(context.raw);
                                            const total = personasData.reduce((sum, current) => sum + current, 0);
                                            const percentage = total > 0 ? Math.round((value / total) * 1000) / 10 : 0;
                                            return `${context.label}: ${numberFormatter.format(value)} (${percentage.toFixed(1)}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                } else {
                    chartInstances.personas.data.datasets[0].data = personasData;
                    chartInstances.personas.update();
                }
            }
        }

        function getEmptyResultsMessage() {
            const terminoActual = (state.filters?.termino || '').trim();
            return terminoActual
                ? `No se encontraron invitados que coincidan con "${terminoActual}".`
                : 'No hay invitados para mostrar con los filtros seleccionados.';
        }

        function setSearchSummary(message = '') {
            if (!summaryContainer) return;
            summaryContainer.textContent = message || '';
        }

        function buildSearchSummary(invitadosLista) {
            const total = Array.isArray(invitadosLista) ? invitadosLista.length : 0;
            if (total === 0) {
                return getEmptyResultsMessage();
            }

            const terminoActual = (state.filters?.termino || '').trim();
            const estadoActual = (state.filters?.estado || 'todos').trim();
            const partes = [`${total} invitado${total === 1 ? '' : 's'} encontrado${total === 1 ? '' : 's'}`];

            if (terminoActual) {
                partes.push(`para "${terminoActual}"`);
            }

            if (estadoActual && estadoActual.toLowerCase() !== 'todos') {
                const estadoLabel = estadoActual.charAt(0).toUpperCase() + estadoActual.slice(1);
                partes.push(`con estado ${estadoLabel}`);
            }

            return `${partes.join(' ')}.`;
        }

        function updateSearchSummary(invitadosLista) {
            if (!summaryContainer) return;
            const message = buildSearchSummary(invitadosLista);
            setSearchSummary(message);
        }

        function formatEstadoLabel(value) {
            const estado = (value || '').trim();
            if (!estado || estado.toLowerCase() === 'todos') {
                return 'Estado: cualquier estado';
            }
            return `Estado: ${estado.charAt(0).toUpperCase() + estado.slice(1)}`;
        }

        function renderOverview(filters, invitadosLista) {
            if (!overviewContainer) return;
            const total = Array.isArray(invitadosLista) ? invitadosLista.length : 0;
            const terminoActual = (filters?.termino || '').trim();
            const estadoActual = (filters?.estado || 'todos').trim();
            const hayFiltro = Boolean(terminoActual || (estadoActual && estadoActual.toLowerCase() !== 'todos'));

            overviewContainer.dataset.empty = hayFiltro ? 'false' : 'true';

            if (overviewTotal) {
                overviewTotal.textContent = total;
            }

            if (overviewLabel) {
                if (!hayFiltro) {
                    overviewLabel.textContent = total === 1 ? 'invitación visible' : 'invitaciones visibles';
                } else if (total === 0) {
                    overviewLabel.textContent = 'sin resultados';
                } else {
                    overviewLabel.textContent = total === 1 ? 'invitación coincide' : 'invitaciones coinciden';
                }
            }

            if (overviewTermino) {
                overviewTermino.textContent = terminoActual
                    ? `Nombre o apellido contiene “${terminoActual}”`
                    : 'Sin filtro por nombre';
            }

            if (overviewEstado) {
                overviewEstado.textContent = formatEstadoLabel(estadoActual);
            }
        }

        function setLoading(isLoading) {
            const loading = Boolean(isLoading);
            searchForm.classList.toggle('is-loading', loading);
            if (submitButton) {
                submitButton.disabled = loading;
                submitButton.setAttribute('aria-busy', loading ? 'true' : 'false');
            }
            if (clearButton) {
                clearButton.setAttribute('aria-disabled', loading ? 'true' : 'false');
            }
            if (statusIndicator) {
                statusIndicator.setAttribute('aria-hidden', loading ? 'false' : 'true');
                statusIndicator.textContent = loading ? 'Buscando…' : '';
            }
        }

        function renderAlerts(list) {
            if (!alertContainer) return;
            alertContainer.innerHTML = '';
            if (!Array.isArray(list) || list.length === 0) return;
            const fragment = document.createDocumentFragment();
            list.forEach((item) => {
                const div = document.createElement('div');
                div.className = `alert alert-${item.tipo || 'info'}`;
                div.textContent = item.texto || '';
                fragment.appendChild(div);
            });
            alertContainer.appendChild(fragment);
        }

        function removeTemporaryAlertById(id) {
            if (!alertContainer || !id) return;
            const existing = alertContainer.querySelector(`[data-temp-alert-id="${id}"]`);
            if (existing) {
                existing.remove();
            }
        }

        function showTemporaryAlert(message, type = 'info', options = {}) {
            if (!alertContainer || !message) return;
            const { duration = 3200, id = null } = options;
            if (id) {
                removeTemporaryAlertById(id);
            }
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            if (id) {
                alert.dataset.tempAlertId = id;
            }
            alert.textContent = message;
            alertContainer.appendChild(alert);
            if (duration > 0) {
                window.setTimeout(() => {
                    if (alert.parentNode) {
                        alert.remove();
                    }
                }, duration);
            }
        }

        async function copyTextToClipboard(text) {
            const normalizedText = `${text ?? ''}`.trim();
            if (!normalizedText) {
                throw new Error('No hay link para copiar.');
            }
            if (navigator.clipboard?.writeText) {
                await navigator.clipboard.writeText(normalizedText);
                return true;
            }

            const textarea = document.createElement('textarea');
            textarea.value = normalizedText;
            textarea.setAttribute('readonly', '');
            textarea.style.position = 'fixed';
            textarea.style.top = '-9999px';
            textarea.style.left = '-9999px';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            textarea.setSelectionRange(0, textarea.value.length);

            let successful = false;
            try {
                successful = document.execCommand('copy');
            } catch (error) {
                successful = false;
            }

            document.body.removeChild(textarea);

            if (!successful) {
                throw new Error('No fue posible copiar el link.');
            }

            return true;
        }

        function renderStats(stats) {
            if (!stats) return;
            setStatValue('grupos', stats.totalGrupos, formatIntegerValue);
            setStatValue('personas', stats.totalPersonas, formatIntegerValue);
            setStatValue('confirmados', stats.confirmados, formatIntegerValue);
            setStatValue('pendientes', stats.pendientes, formatIntegerValue);
            setStatValue('rechazados', stats.rechazados, formatIntegerValue);
            setStatValue('personas-rechazadas', stats.personasRechazadas, formatIntegerValue);
            setStatValue('porcentaje-confirmacion', stats.porcentajeConfirmacion, formatPercentValue);
            setStatValue('porcentaje-respuesta', stats.porcentajeRespuesta, formatPercentValue);
            setStatValue('grupos-respondieron', stats.gruposRespondieron, formatIntegerValue);
            setStatValue('personas-pendientes', stats.personasPendientes, formatIntegerValue);
            setStatValue('capacidad-disponible', stats.capacidadDisponible, formatIntegerValue);
            setStatValue('grupos-parciales', stats.gruposConAsistenciaParcial, formatIntegerValue);
            setStatValue('promedio-personas', stats.promedioPersonasGrupo, formatDecimalValue);
            setStatValue('promedio-asistentes-grupo', stats.promedioAsistentesPorGrupoConfirmado, formatDecimalValue);
            setStatValue('costo-persona', stats.costoPorPersonaARS, formatCurrencyValue);
            setStatValue('costo-confirmados', stats.costoConfirmadosARS, formatCurrencyValue);
            setStatValue('costo-pendiente', stats.costoPendienteARS, formatCurrencyValue);
            setStatValue('capacidad-planeada', stats.capacidadPlaneada, formatIntegerValue);
            setStatValue('capacidad-restante-evento', stats.capacidadRestanteEvento, formatIntegerValue);
            setStatValue('capacidad-ocupada-porcentaje', stats.porcentajeOcupacionPlaneada, formatPercentValue);
            updateCharts(stats);
        }

        function updateFormFields(filters) {
            if (inputBuscar) inputBuscar.value = filters.termino || '';
            if (selectEstado) selectEstado.value = filters.estado || 'todos';
        }

        function buildSearchParams(filters) {
            const params = new URLSearchParams();
            const termino = (filters?.termino || '').trim();
            const estado = (filters?.estado || 'todos').trim();
            if (termino) params.set('q', termino);
            if (estado && estado !== 'todos') params.set('estado', estado);
            return params;
        }

        async function loadInvitados(filters, options = {}) {
            const { extraAlerts = [], updateUrl = true } = options;
            const params = buildSearchParams(filters);
            const queryString = params.toString();
            const requestUrl = queryString ? `${searchForm.action}?${queryString}` : searchForm.action;
            setLoading(true);
            try {
                const response = await fetch(requestUrl, { headers: { Accept: 'application/json' } });
                const expectsJson = response.headers.get('content-type')?.includes('application/json');
                const data = expectsJson ? await response.json() : null;
                if (!response.ok || !data?.ok) {
                    throw new Error(data?.error || 'No se pudo actualizar el listado.');
                }

                state.filters = {
                    termino: data.termino ?? '',
                    estado: data.estadoSeleccionado ?? 'todos'
                };
                state.baseUrl = data.baseUrl || state.baseUrl;

                updateFormFields(state.filters);
                renderStats(data.stats);
                renderTable(data.invitados, state.baseUrl);
                updateSearchSummary(data.invitados);
                renderOverview(state.filters, data.invitados);

                const combinedAlerts = [...extraAlerts, ...(data.alerts || [])];
                renderAlerts(combinedAlerts);

                if (updateUrl) {
                    const newQuery = buildSearchParams(state.filters).toString();
                    const newUrl = newQuery ? `${window.location.pathname}?${newQuery}` : window.location.pathname;
                    window.history.replaceState({}, '', newUrl);
                }
            } catch (error) {
                renderAlerts([{ tipo: 'error', texto: error.message || 'No se pudo actualizar el listado.' }]);
            } finally {
                setLoading(false);
            }
        }

        function wireDeleteHandlers() {
            const forms = tableBody.querySelectorAll('form[data-ajax-delete]');
            forms.forEach((form) => {
                form.addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const nombreInvitado = form.getAttribute('data-invitado-nombre') || 'este invitado';
                    const confirmado = window.confirm(`¿Seguro que querés eliminar a ${nombreInvitado}? Esta acción no se puede deshacer.`);
                    if (!confirmado) return;

                    const submit = form.querySelector('button[type="submit"]');
                    if (submit) {
                        submit.disabled = true;
                    }

                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            headers: { Accept: 'application/json' }
                        });
                        const expectsJson = response.headers.get('content-type')?.includes('application/json');
                        const result = expectsJson ? await response.json() : null;
                        if (!response.ok || !result?.ok) {
                            throw new Error(result?.error || 'No se pudo eliminar el invitado.');
                        }

                        await loadInvitados(state.filters, {
                            extraAlerts: [{ tipo: 'exito', texto: result.message || 'Invitado eliminado correctamente.' }],
                            updateUrl: false
                        });
                    } catch (error) {
                        renderAlerts([{ tipo: 'error', texto: error.message || 'No se pudo eliminar el invitado.' }]);
                    } finally {
                        if (submit) {
                            submit.disabled = false;
                        }
                    }
                });
            });
        }

        function renderTable(invitadosLista, baseUrlValue) {
            tableBody.innerHTML = '';
            const safeBaseUrl = (baseUrlValue || '').replace(/\/$/, '');

            if (!Array.isArray(invitadosLista) || invitadosLista.length === 0) {
                const tr = document.createElement('tr');
                const td = document.createElement('td');
                td.colSpan = 7;
                td.style.textAlign = 'center';
                td.textContent = getEmptyResultsMessage();
                tr.appendChild(td);
                tableBody.appendChild(tr);
                return;
            }

            invitadosLista.forEach((invitado) => {
                const tr = document.createElement('tr');

                const nombreTd = document.createElement('td');
                nombreTd.textContent = invitado.nombre || '';
                tr.appendChild(nombreTd);

                const apellidoTd = document.createElement('td');
                apellidoTd.textContent = invitado.apellido || '-';
                tr.appendChild(apellidoTd);

                const cantidadTd = document.createElement('td');
                cantidadTd.textContent = invitado.cantidad ?? '';
                tr.appendChild(cantidadTd);

                const confirmadosTd = document.createElement('td');
                confirmadosTd.textContent = invitado.confirmados ?? 0;
                tr.appendChild(confirmadosTd);

                const estadoTd = document.createElement('td');
                const estadoSpan = document.createElement('span');
                const estadoValor = (invitado.estado || '').toLowerCase();
                estadoSpan.className = `status status-${estadoValor}`;
                estadoSpan.textContent = invitado.estado ? invitado.estado.charAt(0).toUpperCase() + invitado.estado.slice(1) : '-';
                estadoTd.appendChild(estadoSpan);
                tr.appendChild(estadoTd);

                const linkTd = document.createElement('td');
                linkTd.className = 'link-cell';
                const linkWrapper = document.createElement('div');
                linkWrapper.className = 'link-cell-content';
                const enlace = document.createElement('a');
                enlace.className = 'link-cell-url';
                enlace.target = '_blank';
                enlace.rel = 'noopener noreferrer';
                const linkUrl = `${safeBaseUrl}/confirmar/${invitado.id}`;
                enlace.href = linkUrl;
                enlace.textContent = linkUrl;
                linkWrapper.appendChild(enlace);

                const copyButton = document.createElement('button');
                copyButton.type = 'button';
                copyButton.className = 'btn-copy-link';
                copyButton.dataset.action = 'copy-link';
                copyButton.dataset.link = linkUrl;

                const iconSpan = document.createElement('span');
                iconSpan.setAttribute('aria-hidden', 'true');
                iconSpan.textContent = '📋';
                copyButton.appendChild(iconSpan);

                const labelSpan = document.createElement('span');
                labelSpan.className = 'btn-copy-link__label';
                labelSpan.textContent = 'Copiar link';
                copyButton.appendChild(labelSpan);

                const nombreCompletoLink = [invitado.nombre, invitado.apellido].filter(Boolean).join(' ').trim();
                const srSpan = document.createElement('span');
                srSpan.className = 'visually-hidden';
                srSpan.textContent = nombreCompletoLink ? `de ${nombreCompletoLink}` : 'del invitado';
                copyButton.appendChild(srSpan);

                linkWrapper.appendChild(copyButton);
                linkTd.appendChild(linkWrapper);
                tr.appendChild(linkTd);

                const accionesTd = document.createElement('td');
                const accionesDiv = document.createElement('div');
                accionesDiv.className = 'action-buttons';

                const editar = document.createElement('a');
                editar.href = `/admin/invitado/editar/${invitado.id}`;
                editar.className = 'btn btn-edit';
                editar.textContent = 'Editar';
                accionesDiv.appendChild(editar);

                const eliminarForm = document.createElement('form');
                eliminarForm.method = 'POST';
                eliminarForm.action = `/admin/invitado/eliminar/${invitado.id}`;
                eliminarForm.setAttribute('data-ajax-delete', '');
                eliminarForm.setAttribute('data-invitado-id', invitado.id);
                const nombreCompleto = [invitado.nombre, invitado.apellido].filter(Boolean).join(' ').trim();
                if (nombreCompleto) {
                    eliminarForm.setAttribute('data-invitado-nombre', nombreCompleto);
                }

                const eliminarBtn = document.createElement('button');
                eliminarBtn.type = 'submit';
                eliminarBtn.className = 'btn btn-delete';
                eliminarBtn.textContent = 'Eliminar';
                eliminarForm.appendChild(eliminarBtn);

                accionesDiv.appendChild(eliminarForm);
                accionesTd.appendChild(accionesDiv);
                tr.appendChild(accionesTd);

                tableBody.appendChild(tr);
            });

            wireDeleteHandlers();
        }

        updateFormFields(state.filters);
        if (initialState.stats) {
            renderStats(initialState.stats);
        }
        renderTable(initialState.invitados, state.baseUrl);
        updateSearchSummary(initialState.invitados);
        renderOverview(state.filters, initialState.invitados);
        renderAlerts(initialState.alerts || []);

        tableBody.addEventListener('click', async (event) => {
            const button = event.target.closest('[data-action="copy-link"]');
            if (!button) return;

            const linkValue = button.dataset.link || button.getAttribute('data-link');
            if (!linkValue) {
                showTemporaryAlert('No se encontró el link para copiar.', 'error', { duration: 4000, id: TEMP_ALERT_IDS.error });
                return;
            }

            button.disabled = true;
            button.setAttribute('aria-busy', 'true');

            try {
                await copyTextToClipboard(linkValue);
                removeTemporaryAlertById(TEMP_ALERT_IDS.error);
                showTemporaryAlert('Link copiado al portapapeles.', 'exito', { duration: 3200, id: TEMP_ALERT_IDS.success });
            } catch (error) {
                const message = error?.message || 'No se pudo copiar el link. Copialo manualmente.';
                removeTemporaryAlertById(TEMP_ALERT_IDS.success);
                showTemporaryAlert(message, 'error', { duration: 4200, id: TEMP_ALERT_IDS.error });
            } finally {
                button.disabled = false;
                button.removeAttribute('aria-busy');
            }
        });

        searchForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const filtros = {
                termino: inputBuscar ? inputBuscar.value.trim() : '',
                estado: selectEstado ? selectEstado.value : 'todos'
            };
            state.filters = filtros;
            loadInvitados(filtros);
        });

        if (clearButton) {
            clearButton.addEventListener('click', (event) => {
                event.preventDefault();
                state.filters = { termino: '', estado: 'todos' };
                updateFormFields(state.filters);
                setSearchSummary('');
                loadInvitados(state.filters);
            });
        }
    });
</script>
</body>
</html>
